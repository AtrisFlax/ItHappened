// <auto-generated />
using System;
using ItHappened.Infrastructure.EFCoreRepositories;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ItHappened.Infrastructure.Migrations
{
    [DbContext(typeof(ItHappenedDbContext))]
    [Migration("20201101223503_FactsMigration")]
    partial class FactsMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ItHappened.Domain.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("ItHappened.Infrastructure.Mappers.EventDto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("HappensDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<double>("LatitudeGeo")
                        .HasColumnType("float");

                    b.Property<double>("LongitudeGeo")
                        .HasColumnType("float");

                    b.Property<byte[]>("Photo")
                        .HasColumnType("varbinary(max)");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<double>("Scale")
                        .HasColumnType("float");

                    b.Property<Guid>("TrackerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("ItHappened.Infrastructure.Mappers.EventTrackerDto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsCommentRequired")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCustomizationRequired")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGeotagRequired")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPhotoRequired")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRatingRequired")
                        .HasColumnType("bit");

                    b.Property<bool>("IsScaleRequired")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUpdated")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ScaleMeasurementUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserDtoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserDtoId");

                    b.ToTable("EventTrackers");
                });

            modelBuilder.Entity("ItHappened.Infrastructure.Mappers.FactDto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FactName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FactType")
                        .HasColumnType("int");

                    b.Property<double>("Priority")
                        .HasColumnType("float");

                    b.Property<Guid>("TrackerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Facts","ItHappened");

                    b.HasDiscriminator<int>("FactType");
                });

            modelBuilder.Entity("ItHappened.Infrastructure.Mappers.UserDto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ItHappened.Infrastructure.Dto.BestRatingEventFactDto", b =>
                {
                    b.HasBaseType("ItHappened.Infrastructure.Mappers.FactDto");

                    b.Property<Guid?>("BestEventCommentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("BestEventDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<double>("BestRating")
                        .HasColumnType("float");

                    b.HasIndex("BestEventCommentId");

                    b.HasDiscriminator().HasValue(3);
                });

            modelBuilder.Entity("ItHappened.Infrastructure.Dto.EventsCountTrackersFactDto", b =>
                {
                    b.HasBaseType("ItHappened.Infrastructure.Mappers.FactDto");

                    b.Property<int>("EventsCount")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue(4);
                });

            modelBuilder.Entity("ItHappened.Infrastructure.Dto.LongestBreakTrackerFactDto", b =>
                {
                    b.HasBaseType("ItHappened.Infrastructure.Mappers.FactDto");

                    b.Property<int>("DurationInDays")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("FirstEventAfterBreakDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("LastEventBeforeBreakDate")
                        .HasColumnType("datetimeoffset");

                    b.HasDiscriminator().HasValue(5);
                });

            modelBuilder.Entity("ItHappened.Infrastructure.Dto.MostEventfulDayTrackersFactDto", b =>
                {
                    b.HasBaseType("ItHappened.Infrastructure.Mappers.FactDto");

                    b.Property<DateTimeOffset>("DayWithLargestEventsCount")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("EventsCount")
                        .HasColumnName("MostEventfulDayTrackersFactDto_EventsCount")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue(6);
                });

            modelBuilder.Entity("ItHappened.Infrastructure.Dto.MostEventfulWeekTrackersFactDto", b =>
                {
                    b.HasBaseType("ItHappened.Infrastructure.Mappers.FactDto");

                    b.Property<int>("EventsCount")
                        .HasColumnName("MostEventfulWeekTrackersFactDto_EventsCount")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("WeekWithLargestEventCountFirstDay")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("WeekWithLargestEventCountLastDay")
                        .HasColumnType("datetimeoffset");

                    b.HasDiscriminator().HasValue(7);
                });

            modelBuilder.Entity("ItHappened.Infrastructure.Dto.MostFrequentEventTrackersFactDto", b =>
                {
                    b.HasBaseType("ItHappened.Infrastructure.Mappers.FactDto");

                    b.Property<double>("EventsPeriod")
                        .HasColumnType("float");

                    b.Property<string>("TrackingName")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue(8);
                });

            modelBuilder.Entity("ItHappened.Infrastructure.Dto.OccursOnCertainDaysOfTheWeekTrackerFactDto", b =>
                {
                    b.HasBaseType("ItHappened.Infrastructure.Mappers.FactDto");

                    b.Property<string>("DaysOfTheWeek")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Percentage")
                        .HasColumnType("float");

                    b.HasDiscriminator().HasValue(9);
                });

            modelBuilder.Entity("ItHappened.Infrastructure.Dto.SingleTrackerEventsCountFactDto", b =>
                {
                    b.HasBaseType("ItHappened.Infrastructure.Mappers.FactDto");

                    b.Property<int>("EventsCount")
                        .HasColumnName("SingleTrackerEventsCountFactDto_EventsCount")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue(10);
                });

            modelBuilder.Entity("ItHappened.Infrastructure.Dto.SpecificDayTimeFactDto", b =>
                {
                    b.HasBaseType("ItHappened.Infrastructure.Mappers.FactDto");

                    b.Property<double>("Percentage")
                        .HasColumnName("SpecificDayTimeFactDto_Percentage")
                        .HasColumnType("float");

                    b.Property<string>("TimeOfTheDay")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue(11);
                });

            modelBuilder.Entity("ItHappened.Infrastructure.Dto.SumScaleTrackerFactDto", b =>
                {
                    b.HasBaseType("ItHappened.Infrastructure.Mappers.FactDto");

                    b.Property<string>("MeasurementUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("SumValue")
                        .HasColumnType("float");

                    b.HasDiscriminator().HasValue(12);
                });

            modelBuilder.Entity("ItHappened.Infrastructure.Dto.WorstRatingEventFactDto", b =>
                {
                    b.HasBaseType("ItHappened.Infrastructure.Mappers.FactDto");

                    b.Property<Guid?>("WorstEventCommentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("WorstEventDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("WorstEventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("WorstRating")
                        .HasColumnType("float");

                    b.HasIndex("WorstEventCommentId");

                    b.HasDiscriminator().HasValue(13);
                });

            modelBuilder.Entity("ItHappened.Infrastructure.Mappers.AverageRatingTrackerFactDto", b =>
                {
                    b.HasBaseType("ItHappened.Infrastructure.Mappers.FactDto");

                    b.Property<double>("AverageRating")
                        .HasColumnType("float");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("ItHappened.Infrastructure.Mappers.AverageScaleTrackerFactDto", b =>
                {
                    b.HasBaseType("ItHappened.Infrastructure.Mappers.FactDto");

                    b.Property<double>("AverageValue")
                        .HasColumnType("float");

                    b.Property<string>("MeasurementUnit")
                        .HasColumnName("AverageScaleTrackerFactDto_MeasurementUnit")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("ItHappened.Infrastructure.Mappers.EventTrackerDto", b =>
                {
                    b.HasOne("ItHappened.Infrastructure.Mappers.UserDto", "UserDto")
                        .WithMany()
                        .HasForeignKey("UserDtoId");
                });

            modelBuilder.Entity("ItHappened.Infrastructure.Dto.BestRatingEventFactDto", b =>
                {
                    b.HasOne("ItHappened.Domain.Comment", "BestEventComment")
                        .WithMany()
                        .HasForeignKey("BestEventCommentId");
                });

            modelBuilder.Entity("ItHappened.Infrastructure.Dto.WorstRatingEventFactDto", b =>
                {
                    b.HasOne("ItHappened.Domain.Comment", "WorstEventComment")
                        .WithMany()
                        .HasForeignKey("WorstEventCommentId");
                });
#pragma warning restore 612, 618
        }
    }
}
